
///////////////////////////////////////////////////////////////////////////////

// --- iterative

function search(target, arr) {
	// Based off Grokking Algorithms' python implementation

  // Initialize our search region to the whole array
  search_start = 0;
  search_end = arr.length - 1;

  // Search loop | Find target
  // Run until we've exhausted possible items
  // search_start > search_end would be an invalid search region
  while (search_start <= search_end) {
    // Find the midpoint of our search region
    mid_point = (search_start + search_end) / 2;
    // Get the item at the midpoint index
    item = arr[mid_point];

    // Check if the item is the one we're looking for
    if (item == target) {
      // If so, immediately return with the midpoint index
      return mid_point;
    }

    // Check if the item is lower than target
    else if (item < target) {
      // If so, discard the lower half of our search region
      search_start = mid_point + 1;
    }

    // Item must be higher than target...
    else {
      // If so, discard the upper half of our search region
      search_end = mid_point - 1;
    }
  }

  // The target isn't here...
  return null;
}

///////////////////////////////////////////////////////////////////////////////

// --- recursive

function search(arr, target) {

    /*
    [Inner algorithm]

        |
        | Essentially the same as the iterative approach.
        | We're just breaking up the for loop into a recursive function.
        |
        | Instead of variable lower and upper bounds, we'll pass them in
        | as function parameters.
        |
        | Inside the function, we find the midpoint and compare it to target.
        |
        | If we need to adjust our search area, we'll call ourselves again,
        | but with adjusted parameters.
        |
        | (We'll need access to `arr` and `target` so we need to pass them in
        | as parameters as well)
        |

    */

    function inner(arr, target, lower, upper) {
        // check if we have a valid search area
        if (lower < upper) {
            // Find the midpoint of our search region
            mid_point = (lower + upper) / 2;
            // Get the item at the midpoint index
            item = arr[mid_point];

            // Check if the item is the one we're looking for
            if (item == target) {
                // If so, immediately return with the midpoint index
                return mid_point;
            }

            // Check if the item is lower than target
            else if (item < target) {
                // If so, discard the lower half of our search region
                return inner(arr, target, midpoint + 1, upper);
            }

            // Item must be higher than target...
            else {
                // If so, discard the upper half of our search region
                return inner(arr, target, lower, midpoint);
            }
        } else {
            // Our search area is empty!
            // Let's let the consumer know we couldn't find `target`
            return null;
        }
    }

    // start with our search region covering the whole array
    // return the result of our recursive search function
    return inner(arr, target, 0, arr.length);
}

///////////////////////////////////////////////////////////////////////////////
